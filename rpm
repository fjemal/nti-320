<!> Building RPMs should NEVER be done with the root user. It should ALWAYS be done with an unprivileged user. 
Building RPMs as root might damage your system. You have been warned.

#Check that you have rpmbuild installed

rpmbuild --showrc
sudo yum install rpm-build
# the package containing /usr/bin/rpmbuild is called rpm-build (that is, with a dash in the package name).
sudo yum install redhat-rpm-config
#Create directories for RPM building under your home
#to avoid possible system libraries and other files damage, you should NEVER build an RPM with the root user
#To build RPMs with an unprivileged user, you must create a directory structure for that purpose, 
#and then create the .rpmmacros file under your home directory overriding the default location of the RPM building tree to the one you created.
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros

#you will most probably need to install make to build software (even software that is not written in C or in a compiled language usually uses Makefiles for its install process)

sudo yum install make



Name:           test
Version:        1.0
Release:        1%{?dist}
Summary:        Test server for centos 7
Group:          NTI-320
License:        open BSD licence
URL:		 http://github.com/nti-320/wiki
Source0:        test-1.0.tar.gz
#BuildRequires:
#Requires:
%description
A test for centos 7 servers package. This shows how to install package and create 
build server using rpm.
%prep
%setup %setup -n tengine-1.5.1
%build
%configure
make %{?_smp_mflags}
%install
rm -rf $RPM_BUILD_ROOT
#make install DESTDIR=%{buildroot}
make install DESTDIR=$RPM_BUILD_ROOT
%files
%doc

#Anything with % before is a a Macros. Macros can be used to set a variable, and there are a few that are already set. 
#To see these macros look in /usr/lib/rpm/macros or /usr/share/doc/rpm-[version]/macros, where [version] is the version of rpm
#The value of the macro is returned by putting the name of the macro in curly braces: %{ }.
%description : Add a short description of your package.
%prep : Here is where you file will be untared Just use %setup -q here and it will untar it.
%build : This is where you file is build, %_configure will run ./configure in tengine directory and you need to add "make %{?_smp_mflags} " to create a make file.
%install : Where your software is installed with make install
%files : The list of files that will be installed.
#Once you have your spec file is ready run the below command

rpmbuild -ba test.spec
